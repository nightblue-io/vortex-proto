syntax = "proto3";

package vortexproto.vortex.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/vortex-io/vortexproto/vortex";

// IAM service definition.
service Vortex {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(ALPHA) Vortex API. Base URL: https://api.nightblue.io/m/blue"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/iam/";
      description: "Service definition";
    }
  };

  // Testing endpoint.
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/vortex/v0/info"
    };
  }
}

// Request message for the GetInfo rpc.
message GetInfoRequest {}

// Request message for the GetInfo rpc.
message GetInfoResponse {
  string info = 1;
}

