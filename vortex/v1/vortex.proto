syntax = "proto3";

package vortexproto.vortex.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/vortex-io/vortexproto/vortex";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Vortex API reference";
    description: "Vortex API is a RESTful API that can be accessed by an HTTP client such as `curl`, or any HTTP library which is part of most modern programming languages. This API reference is autogenerated from [protocol buffers](https://developers.google.com/protocol-buffers) defined in this [repository](https://github.com/nightblue-io/vortex-proto).\n\nSome endpoints, especially those that return lists of resources, have streaming responses; newline-separated stream of “chunks”. Each chunk is an envelope that can contain either a response message or an error. Only the last chunk will include an error, if any.";
    version: "alpha";
  };
  host: "api.nightblue.io";
  schemes: HTTPS;
};

// Vortex service definition.
service Vortex {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(ALPHA) Vortex API. Base URL: https://api.nightblue.io"
    external_docs: {
      url: "https://github.com/nightblue-io/vortex-proto/tree/main/vortex/v1";
      description: "See here for the service definition.";
    }
  };

  // Testing endpoint.
  rpc Do(DoRequest) returns (DoResponse) {
    option (google.api.http) = {
      post: "/vortex/v1:do"
      body: "*"
    };
  }
}

// Request message for the Do rpc.
message DoRequest {
  string data = 1;
}

// Request message for the Do rpc.
message DoResponse {
  string data = 1;
}

