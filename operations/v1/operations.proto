syntax = "proto3";

package vortexproto.operations.v1;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/rpc/status.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/vortex-io/vortexproto/operations";

// Operations service definition.
service Operations {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(ALPHA) Operations API. Base URL: https://api.nightblue.io"
    external_docs: {
      url: "https://github.com/nightblue-io/vortex-proto/tree/main/operations/v1";
      description: "See here for the service definition.";
    }
  };

  // List long-running operations.
  rpc ListOperations(ListOperationsRequest) returns (ListOperationsResponse) {
    option (google.api.http) = {
      get: "/vortex/ops/v1"
    };
  }

  // Get a long-running operation.
  rpc GetOperation(GetOperationRequest) returns (Operation) {
    option (google.api.http) = {
      get: "/vortex/ops/v1/{name}"
    };
  }

  // Delete a long-running operation.
  rpc DeleteOperation(DeleteOperationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/vortex/ops/v1/{name}"
    };
  }

  // Cancel a long-running operation.
  rpc CancelOperation(CancelOperationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/vortex/ops/v1/{name}:cancel"
      body: "*"
    };
  }

  // Wait on a long-running operation.
  rpc WaitOperation(WaitOperationRequest) returns (Operation) {
  }
}

// This resource represents a long-running operation that is the result of a
// network API call.
message Operation {
  // The server-assigned name, which is only unique within the same service that
  // originally returns it. If you use the default HTTP mapping, the
  // `name` should be a resource name ending with `operations/{unique_id}`.
  string name = 1;

  // Service-specific metadata associated with the operation.  It typically
  // contains progress information and common metadata such as create time.
  // Some services might not provide such metadata.  Any method that returns a
  // long-running operation should document the metadata type, if any.
  google.protobuf.Any metadata = 2;

  // If the value is `false`, it means the operation is still in progress.
  // If `true`, the operation is completed, and either `error` or `response` is
  // available.
  bool done = 3;

  // The operation result, which can be either an `error` or a valid `response`.
  // If `done` == `false`, neither `error` nor `response` is set.
  // If `done` == `true`, exactly one of `error` or `response` is set.
  oneof result {
    // The error result of the operation in case of failure or cancellation.
    google.rpc.Status error = 4;

    // The normal response of the operation in case of success.  If the original
    // method returns no data on success, such as `Delete`, the response is
    // `google.protobuf.Empty`.  If the original method is standard
    // `Get`/`Create`/`Update`, the response should be the resource.  For other
    // methods, the response should have the type `XxxResponse`, where `Xxx`
    // is the original method name.  For example, if the original method name
    // is `TakeSnapshot()`, the inferred response type is
    // `TakeSnapshotResponse`.
    google.protobuf.Any response = 5;
  }
}

// Request message for the ListOperations rpc.
message ListOperationsRequest {
  string name = 1;
  string next_token = 2;
}

// Response message for the ListOperations rpc.
message ListOperationsResponse {
  repeated Operation operations = 1;
  string next_token = 2;
}

// Request message for the GetOperation rpc.
message GetOperationRequest {
  string name = 1;
}

// Request message for the DeleteOperation rpc.
message DeleteOperationRequest {
  string name = 1;
}

// Request message for the CancelOperation rpc.
message CancelOperationRequest {
  string name = 1;
}

// Request message for the WaitOperation rpc.
message WaitOperationRequest {
  string name = 1;
}
